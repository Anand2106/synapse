{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "anand-synapse1"
		},
		"MySql1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'MySql1'"
		},
		"anand-synapse1-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'anand-synapse1-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:anand-synapse1.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"ded_poollinkedserviceSP_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ded_poollinkedserviceSP'"
		},
		"linkedService1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'linkedService1'"
		},
		"anand-synapse1-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ananddls.dfs.core.windows.net"
		},
		"linkedService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ananddls.dfs.core.windows.net/"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/TestingPipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LK_GetMeta",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "lookup_meta",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LK_GetMeta",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LK_GetMeta').output.value",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "checkdataOnprem",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "MySqlSource",
											"query": {
												"value": "@concat('select count(*)\n AS Count from ',concat(item().sourcedb,'.',item().sourcetable),\n' where inserteddate > \"',item().batchendtime,'\" and ', \n'inserteddate <= \"',utcNow(),'\"')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "MySqlSource",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								},
								{
									"name": "updateAvailableInMetaData",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "checkdataOnprem",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlPoolSource",
											"sqlReaderQuery": {
												"value": "@concat('DECLARE @Availability nvarchar(100)\n    IF (',activity('checkdataOnprem').output.firstRow.Count,' = 0)\n        BEGIN\n            SET @Availability = ''No''\n        END\n    ELSE\n        BEGIN\n            SET @Availability = ''Yes''\n        END\n\n    UPDATE [dbo].[metatable]\n    SET changed = @Availability \n    WHERE sourcetable = ''',item().sourcetable,'''; SELECT 1;')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "lookup_meta",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-21T12:00:58Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/lookup_meta')]",
				"[concat(variables('workspaceId'), '/datasets/MySqlSource')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/copy_activity')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "MySqlSource",
								"query": "select * from dbo.emp"
							},
							"sink": {
								"type": "SqlPoolSink",
								"allowCopyCommand": true,
								"copyCommandSettings": {}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "linkedService1",
									"type": "LinkedServiceReference"
								},
								"path": "data"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id",
											"type": "Int32"
										},
										"sink": {
											"name": "id",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "name",
											"type": "String"
										},
										"sink": {
											"name": "emp_name",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "MySqlSource",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DedicatedSqlPool",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-19T07:06:14Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/MySqlSource')]",
				"[concat(variables('workspaceId'), '/datasets/DedicatedSqlPool')]",
				"[concat(variables('workspaceId'), '/linkedServices/linkedService1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/metadatadriven_pipelline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "lookup_meta",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 2,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "MySqlSource"
										},
										"sink": {
											"type": "SqlPoolSink",
											"writeBehavior": "Upsert",
											"upsertSettings": {
												"keys": {
													"value": "@array(item().keycolumn)",
													"type": "Expression"
												},
												"interimSchemaName": ""
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "anand-synapse1-WorkspaceDefaultStorage",
												"type": "LinkedServiceReference"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "mysql_foreach",
											"type": "DatasetReference",
											"parameters": {
												"sourcedb": {
													"value": "@item().sourcedb",
													"type": "Expression"
												},
												"sourcetablename": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ded_pool_sink",
											"type": "DatasetReference",
											"parameters": {
												"desttable": {
													"value": "@item().desttable",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "success_log_table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[dbo].[InsertAuditLog]",
										"storedProcedureParameters": {
											"DestDb": {
												"value": {
													"value": "@item().destdb",
													"type": "Expression"
												},
												"type": "String"
											},
											"Desttable": {
												"value": {
													"value": "@item().desttable",
													"type": "Expression"
												},
												"type": "String"
											},
											"Pipelineendtime": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"Pipelinestarttime": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"Rowcount": {
												"value": {
													"value": "@activity('Copy data1').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDb": {
												"value": {
													"value": "@item().sourcedb",
													"type": "Expression"
												},
												"type": "String"
											},
											"Sourcetable": {
												"value": {
													"value": "@item().sourcetable",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ded_poollinkedserviceSP",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "fail_log_table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[dbo].[InsertAuditLog]",
										"storedProcedureParameters": {
											"DestDb": {
												"value": {
													"value": "@item().destdb",
													"type": "Expression"
												},
												"type": "String"
											},
											"Desttable": {
												"value": {
													"value": "@item().desttable",
													"type": "Expression"
												},
												"type": "String"
											},
											"Pipelineendtime": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"Pipelinestarttime": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].start",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"Rowcount": {
												"value": {
													"value": "@activity('Copy data1').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDb": {
												"value": {
													"value": "@item().sourcedb",
													"type": "Expression"
												},
												"type": "String"
											},
											"Sourcetable": {
												"value": {
													"value": "@item().sourcetable",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "@activity('Copy data1').output.executionDetails[0].status",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ded_poollinkedserviceSP",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "pipelineReturnValue",
										"value": [
											{
												"key": "copy_output",
												"value": {
													"type": "Expression",
													"content": "@activity('Copy data1').output.executionDetails[0].start"
												}
											}
										],
										"setSystemVariable": true
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-20T11:38:57Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/lookup_meta')]",
				"[concat(variables('workspaceId'), '/datasets/mysql_foreach')]",
				"[concat(variables('workspaceId'), '/datasets/ded_pool_sink')]",
				"[concat(variables('workspaceId'), '/linkedServices/ded_poollinkedserviceSP')]",
				"[concat(variables('workspaceId'), '/linkedServices/anand-synapse1-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/orchestrationpipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LK_metatable",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "lookup_meta",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LK_metatable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LK_metatable').output.value",
								"type": "Expression"
							},
							"batchCount": 3,
							"activities": [
								{
									"name": "CopyDataToStaging",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "MySqlSource"
										},
										"sink": {
											"type": "SqlPoolSink",
											"writeBehavior": "Upsert",
											"upsertSettings": {
												"keys": {
													"value": "@array(item().keycolumn)",
													"type": "Expression"
												},
												"interimSchemaName": ""
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "anand-synapse1-WorkspaceDefaultStorage",
												"type": "LinkedServiceReference"
											}
										},
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "mysql_foreach",
											"type": "DatasetReference",
											"parameters": {
												"sourcedb": {
													"value": "@item().sourcedb",
													"type": "Expression"
												},
												"sourcetablename": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ded_pool_sink",
											"type": "DatasetReference",
											"parameters": {
												"desttable": {
													"value": "@item().desttable",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "success_log_table",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyDataToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[dbo].[InsertAuditLog]",
										"storedProcedureParameters": {
											"DestDb": {
												"value": {
													"value": "@item().destdb",
													"type": "Expression"
												},
												"type": "String"
											},
											"Desttable": {
												"value": {
													"value": "@item().desttable",
													"type": "Expression"
												},
												"type": "String"
											},
											"Pipelineendtime": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"Pipelinestarttime": {
												"value": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"Rowcount": {
												"value": {
													"value": "@activity('CopyDataToStaging').output.rowsCopied",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"SourceDb": {
												"value": {
													"value": "@item().sourcedb",
													"type": "Expression"
												},
												"type": "String"
											},
											"Sourcetable": {
												"value": {
													"value": "@item().sourcetable",
													"type": "Expression"
												},
												"type": "String"
											},
											"Status": {
												"value": {
													"value": "succeeded",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ded_poollinkedserviceSP",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "updateBatchdatetime",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyDataToStaging",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[dbo].[updateBatchdateColumn]",
										"storedProcedureParameters": {
											"batchenddate": {
												"value": {
													"value": "@utcNow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"batchstartdate": {
												"value": {
													"value": "@pipeline().TriggerTime",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"sourcedb": {
												"value": {
													"value": "@item().sourcedb",
													"type": "Expression"
												},
												"type": "String"
											},
											"sourcetable": {
												"value": {
													"value": "@item().sourcetable",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "ded_poollinkedserviceSP",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-21T09:51:20Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/lookup_meta')]",
				"[concat(variables('workspaceId'), '/datasets/mysql_foreach')]",
				"[concat(variables('workspaceId'), '/datasets/ded_pool_sink')]",
				"[concat(variables('workspaceId'), '/linkedServices/ded_poollinkedserviceSP')]",
				"[concat(variables('workspaceId'), '/linkedServices/anand-synapse1-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/sqlwatcherroot')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LK_GetMeta",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlPoolSource",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "lookup_meta",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(bool(activity('CheckAllChangedtoAvailable').output.firstRow.changed),true)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CheckAllChangedtoAvailable",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlPoolSource",
											"sqlReaderStoredProcedureName": "[dbo].[CheckMetatableAvailabeSP]",
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "lookup_meta",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "msg",
									"value": {
										"type": "Expression",
										"content": "@activity('CheckAllChangedtoAvailable').output"
									}
								}
							],
							"setSystemVariable": true
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "msg",
									"value": {
										"type": "Expression",
										"content": "@concat('Data Ingestion not available','!')"
									}
								}
							],
							"setSystemVariable": true
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LK_GetMeta",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LK_GetMeta').output.value",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "updateAvailableInMetaData",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "checkdataOnprem",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlPoolSource",
											"sqlReaderQuery": {
												"value": "@concat('DECLARE @Availability nvarchar(100)\n    IF ',activity('checkdataOnprem').output.firstRow.Count, ' IS NULL \n    SET @Availability = ''No''\n    ELSE\n    SET @Availability = ''Yes''\n    UPDATE dbo.loadcontrol SET Activated = @Availability WHERE TableName =''',activity('checkdataOnprem').output.firstRow, '''; SELECT 1')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "lookup_meta",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "checkdataOnprem",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "MySqlSource",
											"query": {
												"value": "@concat('select count(*) from ',concat(item().sourcedb,'.',item().sourcetable),\n' where inserteddate > \"',item().batchenddate,'\" and ', \n'inserteddate <= \"',utcNow(),'\"')",
												"type": "Expression"
											}
										},
										"dataset": {
											"referenceName": "MySqlSource",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-21T11:47:46Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/lookup_meta')]",
				"[concat(variables('workspaceId'), '/datasets/MySqlSource')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wrapper_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "metadatadriven_pipelline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "success_log_pipeline",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].[InsertAuditLogPipeline]",
							"storedProcedureParameters": {
								"Pipelineendtime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"pipelineid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelinename": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pipelinestarttime": {
									"value": {
										"value": "@activity('Execute Pipeline1').output.pipelineReturnValue",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"pipelinetriggertype": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": {
										"value": "succeeded",
										"type": "Expression"
									},
									"type": "String"
								},
								"workspacename": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ded_poollinkedserviceSP",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "fail_log_pipeline",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].[InsertAuditLogPipeline]",
							"storedProcedureParameters": {
								"Pipelineendtime": {
									"value": {
										"value": "@utcNow()",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"pipelineid": {
									"value": {
										"value": "@pipeline().RunId",
										"type": "Expression"
									},
									"type": "String"
								},
								"pipelinename": {
									"value": {
										"value": "@pipeline().Pipeline",
										"type": "Expression"
									},
									"type": "String"
								},
								"Pipelinestarttime": {
									"value": {
										"value": "@activity('Execute Pipeline1').output.pipelineReturnValue",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"pipelinetriggertype": {
									"value": {
										"value": "@pipeline().TriggerType",
										"type": "Expression"
									},
									"type": "String"
								},
								"Status": {
									"value": {
										"value": "Failed",
										"type": "Expression"
									},
									"type": "String"
								},
								"workspacename": {
									"value": {
										"value": "@pipeline().DataFactory",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "ded_poollinkedserviceSP",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "starttime",
							"value": {
								"value": "@utcNow()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"starttime": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-20T11:39:12Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/metadatadriven_pipelline')]",
				"[concat(variables('workspaceId'), '/linkedServices/ded_poollinkedserviceSP')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/wrapper_sqlwatcher')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Sqlwatcher",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "sqlwatcherroot",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Sqlwatcher",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Sqlwatcher').output.pipelineReturnValue,true)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "OrchestrationPipeline",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "orchestrationpipeline",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-04-21T11:48:14Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/sqlwatcherroot')]",
				"[concat(variables('workspaceId'), '/pipelines/orchestrationpipeline')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DedicatedSqlPool')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [
					{
						"name": "id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "emp_name",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "employee"
				},
				"sqlPool": {
					"referenceName": "ded_pool",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/ded_pool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MySqlSource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MySql1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": "`emp`"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/MySql1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/auditlogsource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [
					{
						"name": "sur_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "sourcedb",
						"type": "varchar"
					},
					{
						"name": "sourcetable",
						"type": "varchar"
					},
					{
						"name": "destdb",
						"type": "varchar"
					},
					{
						"name": "desttable",
						"type": "varchar"
					},
					{
						"name": "rowcounts",
						"type": "int",
						"precision": 10
					},
					{
						"name": "pipelinestarttime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "pipelineendtime",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "pipelinestatus",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "audit_log_table"
				},
				"sqlPool": {
					"referenceName": "ded_pool",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/ded_pool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ded_pool_sink')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"desttable": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "dbo",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().desttable",
						"type": "Expression"
					}
				},
				"sqlPool": {
					"referenceName": "ded_pool",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/ded_pool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lookup_meta')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [
					{
						"name": "sourcedb",
						"type": "varchar"
					},
					{
						"name": "sourcetable",
						"type": "varchar"
					},
					{
						"name": "destdb",
						"type": "varchar"
					},
					{
						"name": "desttable",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "metatable"
				},
				"sqlPool": {
					"referenceName": "ded_pool",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/ded_pool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/lookupmeta2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "SqlPoolTable",
				"schema": [
					{
						"name": "keycolumn",
						"type": "varchar"
					},
					{
						"name": "sourcedb",
						"type": "varchar"
					},
					{
						"name": "sourcetable",
						"type": "varchar"
					},
					{
						"name": "destdb",
						"type": "varchar"
					},
					{
						"name": "desttable",
						"type": "varchar"
					},
					{
						"name": "dependenttable",
						"type": "varchar"
					},
					{
						"name": "dependencylevel",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "metatable1"
				},
				"sqlPool": {
					"referenceName": "ded_pool",
					"type": "SqlPoolReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/sqlPools/ded_pool')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/mysql_foreach')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "MySql1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sourcedb": {
						"type": "string"
					},
					"sourcetablename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "MySqlTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@concat(dataset().sourcedb,'.',dataset().sourcetablename)",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/MySql1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/MySql1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "MySql",
				"typeProperties": {
					"connectionString": "[parameters('MySql1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "selfhostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/selfhostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/anand-synapse1-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('anand-synapse1-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/anand-synapse1-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('anand-synapse1-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ded_poollinkedserviceSP')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ded_poollinkedserviceSP_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/linkedService1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('linkedService1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('linkedService1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/selfhostedIR')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CheckMetatableAvailabeSP')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE PROC [dbo].[CheckMetatableAvailabeSP] \nAS\nBEGIN\n\n DECLARE @totalCount int,\n         @availableCount int;\n\n BEGIN TRY\n    SET @totalCount = (SELECT COUNT(*) FROM [dbo].[metatable])\n\n    SET @availableCount = (SELECT COUNT(*) FROM [dbo].[metatable] WHERE changed = 'available')\n\n    IF @availableCount = @totalCount\n        BEGIN\n        SELECT 1 AS Status;\n        END\n    ELSE\n        BEGIN\n            SELECT 0 AS Status;\n        END\n\n        --Alternative Way\n\n    -- IF EXIST(Select * from [dbo].[metatable] Where changed <> 'available' )\n    --     BEGIN\n    --         Select 0 as Status\n    --     END\n\n    -- ELSE\n    --     BEGIN\n    --         Select 1 as Status\n    --     END\n\n END TRY\n\n BEGIN CATCH\n\n END CATCH\n\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ded_pool",
						"poolName": "ded_pool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/InsertAuditLogSP')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "Create Proc [dbo].[InsertAuditLog] @SourceDb nvarchar(20),@Sourcetable nvarchar(20),@DestDb nvarchar(20),@Desttable nvarchar(20),@Rowcount int,@Pipelinestarttime datetime,@Pipelineendtime DATETIME,@Status nvarchar(20)\nAS\nBEGIN\n\nInsert into [dbo].[audit_log_table](\n    Sourcedb,\n    Sourcetable,\n    DestDb,\n    Desttable,\n    rowcounts,\n    pipelinestarttime,\n    pipelineendtime,\n    pipelinestatus\n) values (\n    @SourceDb ,\n    @Sourcetable,\n    @DestDb,\n    @Desttable,\n    @Rowcount,\n    @Pipelinestarttime ,\n    @Pipelineendtime,\n    @Status\n)\n\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ded_pool",
						"poolName": "ded_pool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ReturncountSP')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "CREATE PROC checkCount @sourcedb NVARCHAR(10), @sourcetable nvarchar(10) ,@startdate DATETIME,@enddate DATETIME\nAS\nBEGIN\n\nDeclare @availablecount int;\n\nset @availablecount = (select count(*) from CONCAT(@sourcedb,'.',@sourcetable) where inserteddate >= @startdate and inserteddate <= @enddate)\n\nselect @availablecount as countcol\n\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ded_pool",
						"poolName": "ded_pool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TableDefinition')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create table metatable(keycolumn VARCHAR(20),sourcedb varchar(20),sourcetable varchar(20),destdb varchar(20),desttable varchar(20))\n\ninsert into metatable values('cusid','dbo','customer','ded_pool','customer')\ninsert into metatable values('prodid','dbo','product','ded_pool','product')\ninsert into metatable values('vendid','dbo','vendor','ded_pool','vendor')\ninsert into metatable values('tranid','dbo','transactions','ded_pool','transactions')\n\ncreate table audit_log_table(sur_id int IDENTITY,workspacename varchar(40) NULL,pipelinetriggertype varchar(30) NULL,pipelineid varchar(40) NULL,pipelinename varchar(40) NULL,sourcedb varchar(20) NULL,sourcetable varchar(20) NULL,destdb varchar(20) NULL,desttable varchar(20) NULL,rowcounts int NULL,pipelinestarttime DATETIME NULL,pipelineendtime DATETIME NULL,pipelinestatus VARCHAR(20) NULL)\n\ntruncate table audit_log_table\n\nselect * from audit_log_table\nselect * from metatable\n\ncreate table customer(cusid int,cusname VARCHAR(20))\ncreate table product(prodid int,prodname VARCHAR(20))\ncreate table vendor(vendid int,vendname VARCHAR(20))\ncreate table transactions(tranid int,amount DECIMAL(10,2))\n\n\nselect * from product\nselect * from customer\n\ntruncate table product\n\ntruncate table customer\n\ntruncate table vendor\n\ntruncate table transactions\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ded_pool",
						"poolName": "ded_pool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Table_Definition')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "create  table metatable(keycolumn VARCHAR(20),sourcedb varchar(20),sourcetable varchar(20),destdb varchar(20),desttable varchar(20),changed varchar(20) NULL, batchstarttime DATETIME  NULL, batchendtime DATETIME  NULL)\n\ninsert into metatable(keycolumn,sourcedb,sourcetable,destdb,desttable) values('cusid','dbo','customer','ded_pool','customer')\ninsert into metatable(keycolumn,sourcedb,sourcetable,destdb,desttable) values('prodid','dbo','product','ded_pool','product')\ninsert into metatable(keycolumn,sourcedb,sourcetable,destdb,desttable) values('vendid','dbo','vendor','ded_pool','vendor')\ninsert into metatable(keycolumn,sourcedb,sourcetable,destdb,desttable) values('tranid','dbo','transactions','ded_pool','transactions')\n\ncreate table audit_log_table(sur_id int IDENTITY,sourcedb varchar(20),sourcetable varchar(20),destdb varchar(20),desttable varchar(20),rowcounts int,pipelinestarttime DATETIME,pipelineendtime DATETIME,pipelinestatus VARCHAR(20))\n\nselect * from audit_log_table\nselect batchstarttime from metatable\n\ncreate table customer(cusid int,cusname VARCHAR(20),inserteddate NVARCHAR(30))\ncreate table product(prodid int,prodname VARCHAR(20),inserteddate NVARCHAR(30))\ncreate table vendor(vendid int,vendname VARCHAR(20),inserteddate NVARCHAR(30))\ncreate table transactions(tranid int,amount DECIMAL(10,2),inserteddate NVARCHAR(30))\n\ndrop TABLE empl\n\nselect * from product\nselect * from customer\n\ntruncate table product\ntruncate table customer\ntruncate table vendor\n\ndrop table product\ndrop table customer\ndrop table vendor\ndrop table transactions\n\ncreate table metatable1(keycolumn VARCHAR(20),sourcedb varchar(20),sourcetable varchar(20),destdb varchar(20),desttable varchar(20),dependenttable varchar(40) NULL,dependencylevel int NULL)\n\ninsert into metatable1 values('cusid','dbo','customer','ded_pool','customer',NULL,1)\ninsert into metatable1 values('prodid','dbo','product','ded_pool','product',NULL,1)\ninsert into metatable1 values('vendid','dbo','vendor','ded_pool','vendor',NULL,1)\ninsert into metatable1 values('tranid','dbo','transactions','ded_pool','transactions','customer,product',1)\n",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ded_pool",
						"poolName": "ded_pool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/storedprocedurepipeline')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "Create Proc [dbo].[InsertAuditLogPipeline] @workspacename nvarchar(20),@pipelinename nvarchar(20),@pipelineid nvarchar(20),@pipelinetriggertype nvarchar(20),@Pipelinestarttime datetime,@Pipelineendtime DATETIME,@Status nvarchar(20)\nAS\nBEGIN\n\nInsert into [dbo].[audit_log_table](\n    workspacename,\n    pipelinename,\n    pipelineid,\n    pipelinetriggertype,\n    pipelinestarttime,\n    pipelineendtime,\n    pipelinestatus\n) values (\n    @workspacename ,\n    @pipelinename,\n    @pipelineid,\n    @pipelinetriggertype,\n    @Pipelinestarttime ,\n    @Pipelineendtime,\n    @Status\n)\n\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ded_pool",
						"poolName": "ded_pool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/storedproceduretable')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "Create Proc [dbo].[InsertAuditLog] @SourceDb nvarchar(20),@Sourcetable nvarchar(20),@DestDb nvarchar(20),@Desttable nvarchar(20),@Rowcount int,@Pipelinestarttime datetime,@Pipelineendtime DATETIME,@Status nvarchar(20)\nAS\nBEGIN\n\nInsert into [dbo].[audit_log_table](\n    Sourcedb,\n    Sourcetable,\n    DestDb,\n    Desttable,\n    rowcounts,\n    pipelinestarttime,\n    pipelineendtime,\n    pipelinestatus\n) values (\n    @SourceDb ,\n    @Sourcetable,\n    @DestDb,\n    @Desttable,\n    @Rowcount,\n    @Pipelinestarttime ,\n    @Pipelineendtime,\n    @Status\n)\n\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ded_pool",
						"poolName": "ded_pool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/updateavailableforcount')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nCREATE PROC [dbo].[CheckMetatableAvailabeSP] AS\nBEGIN\n\n DECLARE @totalCount int,\n         @availableCount int;\n\n BEGIN TRY\n    SET @totalCount = (SELECT COUNT(*) FROM [dbo].[metatable])\n\n    SET @availableCount = (SELECT COUNT(*) FROM [dbo].[metatable] WHERE changed = 'available')\n\n    IF @availableCount = @totalCount\n        BEGIN\n        SELECT 1 AS Status;\n        END\n    ELSE\n        BEGIN\n            SELECT 0 AS Status;\n        END\n\n        --Other Way\n\n    -- IF EXIST(Select * from [dbo].[metatable] Where changed <> 'available' )\n    --     BEGIN\n    --         Select 0 as Status\n    --     END\n\n    -- ELSE\n    --     BEGIN\n    --         Select 1 as Status\n    --     END\n\n END TRY\n\n BEGIN CATCH\n\n END CATCH\n\nEND\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ded_pool",
						"poolName": "ded_pool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/updatebatchdatetime')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "ALTER PROC [dbo].[updateBatchdateColumn] @sourcedb NVARCHAR(20),@sourcetable NVARCHAR(20),@batchstartdate DATETIME,@batchenddate DATETIME\nAS\nBEGIN\n\nUPDATE metatable set batchstarttime = @batchstartdate , batchendtime = @batchenddate where sourcedb = @sourcedb and sourcetable = @sourcetable \n\nEND",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"databaseName": "ded_pool",
						"poolName": "ded_pool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ded_pool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"annotations": []
			},
			"dependsOn": [],
			"location": "centralindia"
		}
	]
}